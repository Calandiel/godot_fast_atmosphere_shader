// ###
// ### UTILS
// ###
const float PI = 3.14159265358;
const float TAU = PI * 2.0;

//float getMiePhase(float cosTheta) {
//	const float g = 0.8;
//	const float scale = 3.0/(8.0*PI);
//	
//	float num = (1.0-g*g)*(1.0+cosTheta*cosTheta);
//	float denom = (2.0+g*g)*pow((1.0 + g*g - 2.0*g*cosTheta), 1.5);
//	
//	return scale*num/denom;
//}
//
//float getRayleighPhase(float cosTheta) {
//	const float k = 3.0/(16.0*PI);
//	return k*(1.0+cosTheta*cosTheta);
//}
//
//void getScatteringValues(
//	vec3 pos, 
//	out vec3 rayleighScattering,
//	out float mieScattering,
//	out vec3 extinction,
//	float groundRadiusMM,
//	vec3 rayleighScatteringBase,
//	float rayleighAbsorptionBase,
//	float mieScatteringBase,
//	float mieAbsorptionBase,
//	vec3 ozoneAbsorptionBase
//) {
//	float altitudeKM = (length(pos)-groundRadiusMM)*1000.0;
//	// Note: Paper gets these switched up.
//	float rayleighDensity = exp(-altitudeKM/8.0);
//	float mieDensity = exp(-altitudeKM/1.2);
//	
//	rayleighScattering = rayleighScatteringBase*rayleighDensity;
//	float rayleighAbsorption = rayleighAbsorptionBase*rayleighDensity;
//	
//	mieScattering = mieScatteringBase*mieDensity;
//	float mieAbsorption = mieAbsorptionBase*mieDensity;
//	
//	vec3 ozoneAbsorption = ozoneAbsorptionBase*max(0.0, 1.0 - abs(altitudeKM-25.0)/15.0);
//	
//	extinction = rayleighScattering + rayleighAbsorption + mieScattering + mieAbsorption + ozoneAbsorption;
//}
//
//float safeacos(const float x) {
//	return acos(clamp(x, -1.0, 1.0));
//}
//
//// From https://gamedev.stackexchange.com/questions/96459/fast-ray-sphere-collision-code.
//float rayIntersectSphere(vec3 ro, vec3 rd, float rad) {
//	float b = dot(ro, rd);
//	float c = dot(ro, ro) - rad*rad;
//	if (c > 0.0f && b > 0.0) return -1.0;
//	float discr = b*b - c;
//	if (discr < 0.0) return -1.0;
//	// Special case: inside sphere, use far discriminant
//	if (discr > b*b) return (-b + sqrt(discr));
//	return -b - sqrt(discr);
//}

//
