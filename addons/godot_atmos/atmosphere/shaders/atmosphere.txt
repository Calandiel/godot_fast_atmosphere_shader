shader_type spatial;
render_mode unshaded, fog_disabled, depth_draw_never, depth_test_disabled;

uniform sampler2D screen_texture : source_color, hint_screen_texture;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable;

uniform sampler2D param_transmittance_lut: repeat_disable;
uniform sampler2D param_sky_view_lut: repeat_disable;
uniform sampler3D param_aerial_perspective_lut: repeat_disable;

uniform vec3 param_planet_position;
// TO CHECK: what if instead we have a sun position?
uniform vec3 param_sun_direction = vec3(0.0, 0.0, 1.0);
uniform vec3 sunglight = vec3(1.0, 1.0, 1.0);

uniform float param_rayleigh_scale_height;
uniform vec3 param_rayleigh_scattering;
uniform float param_mie_scale_height;
uniform vec3 param_mie_scattering;

uniform float param_planet_radius = 6370.0;
uniform float param_atmosphere_height = 80.0;

#include shading.glsl

void vertex() {
	POSITION = vec4(VERTEX.xy, 1.0, 1.0);
}

bool depth_was_written(float depth) {
	return depth > 0.0000001;
}

void fragment() {
	// Initialize to the background image
	vec3 screen_color = texture(screen_texture, SCREEN_UV).rgb;

	float depth = textureLod(depth_texture, FRAGCOORD.xy / VIEWPORT_SIZE, 0.0).r;
	vec2 frag_coord = ((FRAGCOORD.xy / VIEWPORT_SIZE) * 2.0) - 1.0; 
	vec4 frag_view_space_position = INV_PROJECTION_MATRIX * vec4(frag_coord, depth, 1.0);
	frag_view_space_position /= frag_view_space_position.w;
	vec4 frag_world_space = INV_VIEW_MATRIX * frag_view_space_position;
	vec3 ray_direction = normalize(frag_world_space.xyz - CAMERA_POSITION_WORLD);

	float frag_distance = length(frag_world_space.xyz - CAMERA_POSITION_WORLD); // from camera
	float frag_height = length(frag_world_space.xyz - param_planet_position);
	float t0 = 0.0; // entrance "time" (its actually a multiplier on the ray direction)
	float t1 = 0.0; // exit "time"

	// Only render the atmosphere if the fragment intersects it
	float minimum_height = -1.0;
	// float minimum_height = 0.01;
	float epsilon = 0.01;

	vec3 ray_origin = CAMERA_POSITION_WORLD - param_planet_position;
	float original_height = length(ray_origin);

	bool wrote_depth = depth_was_written(depth);
	if (original_height < param_planet_radius + minimum_height) {
		ray_origin = normalize(ray_origin) * (param_planet_radius + minimum_height + epsilon);
	}
	ray_origin = param_planet_position + ray_origin;
	bool atmosphere_hit = intersect_planet_with_atmosphere(
		ray_origin,
		ray_direction,
		param_planet_position,
		param_planet_radius,
		param_planet_radius + param_atmosphere_height,
		t0, t1
	);

	// We need to disable atmosphere rendering in some contexts.
	// Otherwise we would have blobs of black on meshes above the atmosphere due to no scattering liting them up.
	bool sample_outside_of_atmosphere = false;
	if (
		wrote_depth &&
		// "if the ray crosses the atmosphere, is the hit point within the atmosphere?"
		!(atmosphere_hit && frag_distance > t0)
	) {
		sample_outside_of_atmosphere = true;
	}

	if (!sample_outside_of_atmosphere && atmosphere_hit) {
		// this is important! it clamps the ray so that it doesn't render over existing bodies
		t0 = min(t0, frag_distance);
		t1 = min(t1, frag_distance);
		// We're passing a lot of parameters to avoid handling structures - tested to be slower on mobile devices
		// TODO: We could eventually use codegen to inline all semi constant uniforms (like planet radius), that ought to be even faster
		vec3 attenuated_color = scatter(
			param_transmittance_lut,
			param_sky_view_lut,
			param_aerial_perspective_lut,
			CAMERA_POSITION_WORLD,
			ray_origin + ray_direction * (t0 + epsilon),
			ray_direction,
			t1 - t0 - epsilon, // ray length
			screen_color.rgb, // base color
			30.0, // sun intensity, TODO: expose this as a shader parameter
			param_sun_direction,
			param_planet_position,
			param_planet_radius,
			param_planet_radius + param_atmosphere_height,
			param_rayleigh_scale_height,
			param_rayleigh_scattering,
			param_mie_scale_height,
			param_mie_scattering,
			original_height,
			wrote_depth
		).rgb;
		screen_color = attenuated_color;
	}
	if (!wrote_depth) {
		vec3 sun = sun_with_bloom(ray_direction, param_sun_direction);
		screen_color += sun;
	}
	float exposure = 1.0;

	vec3 cc = 1.0 - exp(-exposure * screen_color);
	ALBEDO = cc;
	ALPHA = 1.0;
}
